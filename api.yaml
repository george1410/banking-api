openapi: "3.0.3"
info:
  title: dev-banking-api
  version: "1.0"
servers:
- url: https://banking-api.aws.georgemccarron.com
security:
  - cognito-auth: []

paths:
  /accounts/{accountId}:
    get:
      tags:
        - Accounts
      responses:
        200: 
          description: An Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse' 
    delete:
      tags:
        - Accounts
      responses:
        200:
          description: Account deleted successfully
    parameters:
      - name: accountId
        in: path
        description: Account ID
        required: true
        schema:
          type: string
  /customers/{customerId}/accounts:
    get:
      tags:
        - Accounts
      responses:
        200:
          description: An array of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountResponse'
    post:
      tags:
        - Accounts
      parameters:
        - $ref: '#/components/parameters/Quantity'
      requestBody:
        $ref: '#/components/requestBodies/AccountRequest'
      responses:
        201:
          description: An array of the newly created accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountResponse'
    delete:
      tags:
        - Accounts
      responses:
        200:
          description: Accounts deleted successfully
    parameters:
      - name: customerId
        in: path
        description: Customer ID
        required: true
        schema:
          type: string
  /accounts/{accountId}/transactions:
    get:
      tags:
        - Transactions
      responses:
        200:
          description: An array of Transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponse'
    post:
      tags:
        - Transactions
      parameters:
        - $ref: '#/components/parameters/Quantity'
      requestBody:
        $ref: '#/components/requestBodies/TransactionRequest'
      responses:
        201:
          description: An array of the newly created Transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponse'
    parameters:
      - name: accountId
        in: path
        description: Account ID
        required: true
        schema:
          type: string
  /customers:
    get:
      tags:
        - Customers
      responses:
        200:
          description: An array of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerResponse'
    post:
      tags:
        - Customers
      parameters:
        - $ref: '#/components/parameters/Quantity'
      requestBody:
        $ref: '#/components/requestBodies/CustomerRequest'
      responses:
        201:
          description: The newly created customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerResponse'
        400:
          description: Bad Request
  /customers/{customerId}:
    get:
      tags:
        - Customers
      responses:
        200:
          description: A customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
    parameters:
      - name: customerId
        in: path
        description: Customer ID
        required: true
        schema:
          type: string
  /transactions/{transactionId}:
    get:
      tags:
        - Transactions
      responses:
        200:
          description: A transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
    parameters:
      - name: transactionId
        in: path
        description: Transaction ID
        required: true
        schema:
          type: string

components:
  securitySchemes:
    cognito-auth:
      type: http
      scheme: bearer
  parameters:
    Quantity:
      in: query
      name: quantity
      schema:
        type: integer
        default: 1
        minimum: 1
        maximum: 25
      description: The quantity to create, if custom data not being specified in body. This value will be ignored if custom data is passed in the body.
  requestBodies:
    CustomerRequest:
      description: Custom fields to use for creating new customers. If an empty body is passed, all attributes of all new customers will be randomized. Any omitted properties will be randomized.
      content:
        application/json:
          schema:
            type: array
            minItems: 1
            maxItems: 25
            items:
              $ref: '#/components/schemas/CustomerRequest'
    AccountRequest:
      description: Custom fields to use for creating new accounts. If an empty body is passed, all attributes of all new accounts will be randomized. Any omitted properties will be randomized.
      content:
        application/json:
          schema:
            type: array
            minItems: 1
            maxItems: 25
            items:
              $ref: '#/components/schemas/AccountRequest'
    TransactionRequest:
      description: Custom fields to use for creating new transactions. If an empty body is passed, all attributes of all new transactions will be randomized. Any omitted properties will be randomized.
      content:
        application/json:
          schema:
            type: array
            minItems: 1
            maxItems: 25
            items:
              $ref: '#/components/schemas/TransactionRequest'
  schemas:
    CustomerResponse:
        allOf:
          - type: object
            properties:
              customerId:
                type: string
                example: 4luMm6f6sbPZLnYHEDjttM
          - $ref: '#/components/schemas/CustomerRequest'
    CustomerRequest:
      type: object
      properties:
        firstName:
          type: string
          example: George
        lastName:
          type: string
          example: McCarron
        email:
          type: string
          example: hello@georgemccarron.com
        address:
          $ref: '#/components/schemas/Address'
    Address:
      type: object
      properties:
        streetAddress:
          type: string
          example: 10 High Street
        city:
          type: string
          example: Dartford
        state:
          type: string
          example: Kent
        zipCode:
          type: string
          example: DA1 1AA
        country:
          type: string
          example: United Kingdom
    AccountResponse:
      allOf:
        - type: object
          properties:
            accountId:
              type: string
              example: 3YaeOYszLHL28ldk1AyArO
            customerId:
              type: string
              example: 4luMm6f6sbPZLnYHEDjttM
        - $ref: '#/components/schemas/AccountRequest'
    AccountRequest:
      type: object
      properties:
        balance:
          type: number
          example: 12.34
        accountType: 
          type: string
          enum:
            - Current
            - Savings
          example: Current
    TransactionResponse:
      allOf:
        - type: object
          properties:
            transactionId:
              type: string
              example: 2IoHkRtvooFD5MDTsiY4Gt
            accountId:
              type: string
              example: 3YaeOYszLHL28ldk1AyArO
        - $ref: '#/components/schemas/TransactionRequest'
    TransactionRequest:
      type: object
      properties:
        amount:
          type: number
          example: -12.34
        transactionDate:
          type: string
          format: date-time
        merchant:
          type: string
          example: ASDA
        category:
          type: string
          example: Groceries
